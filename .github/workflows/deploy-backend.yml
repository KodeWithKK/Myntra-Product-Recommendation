name: Deploy Flask to AWS Lambda with uv

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Create .env file from Secret
        run: |
          echo "${{ secrets.BACKEND_ENV_FILE }}" > backend/.env

      - name: Zip Lambda Function Code (App only, no deps)
        run: |
          cd backend
          zip -r function.zip app.py .env

      - name: Echo ZIP File Size and Validate Limit
        run: |
          ZIP_SIZE_MB=$(du -m backend/function.zip | cut -f1)
          echo "üì¶ ZIP file size is ${ZIP_SIZE_MB} MB"
          if [ "$ZIP_SIZE_MB" -gt 5120 ]; then
            echo "‚ùå ZIP file size exceeds 5GB AWS Lambda limit. Aborting."
            exit 1
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # ---------- Lambda Layer Creation ----------
      - name: Build, Clean and Upload Lambda Layer ZIP to S3
        run: |
          mkdir -p lambda_layer/python
          uv pip compile backend/pyproject.toml --output-file requirements.txt
          uv pip install -r requirements.txt --target lambda_layer/python

          echo "üßπ Cleaning unnecessary files from layer..."
          find lambda_layer -type d -name "__pycache__" -exec rm -rf {} +
          find lambda_layer -type d -name "*.dist-info" -exec rm -rf {} +
          find lambda_layer -type f -name "*.pyc" -delete
          find lambda_layer -type d -name "tests*" -exec rm -rf {} +

          echo "üìè Checking uncompressed layer size..."
          UNZIPPED_SIZE=$(du -sb lambda_layer | cut -f1)
          echo "Uncompressed size: $((UNZIPPED_SIZE / 1024 / 1024)) MB"
          if [ "$UNZIPPED_SIZE" -gt 262144000 ]; then
            echo "‚ùå Layer uncompressed size exceeds 250MB AWS limit. Aborting."
            exit 1
          fi

          cd lambda_layer
          zip -r9 ../layer.zip .
          cd ..

          aws s3 cp layer.zip s3://k3-lambda-artifacts/layers/flask-layer-k3.zip

      - name: Publish Lambda Layer from S3
        run: |
          LAYER_NAME="flask-layer-k3"
          REGION="ap-south-1"
          HASH=$(shasum -a 256 layer.zip | awk '{ print $1 }')
          echo "üì¶ Layer SHA256: $HASH"

          EXISTING=$(aws lambda list-layer-versions \
            --layer-name $LAYER_NAME \
            --query "LayerVersions[?Description=='$HASH'].Version" \
            --output text)

          if [ -z "$EXISTING" ]; then
            echo "üì§ Publishing layer from S3..."
            LAYER_VERSION=$(aws lambda publish-layer-version \
              --layer-name $LAYER_NAME \
              --description "$HASH" \
              --content S3Bucket=k3-lambda-artifacts,S3Key=layers/flask-layer-k3.zip \
              --compatible-runtimes python3.11 \
              --query 'Version' --output text)
            echo "‚úÖ Published new layer version: $LAYER_VERSION"
          else
            echo "‚úÖ Layer already exists: version $EXISTING"
            LAYER_VERSION=$EXISTING
          fi

          echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV

      - name: Upload Lambda Function ZIP to S3
        run: |
          aws s3 cp backend/function.zip s3://k3-lambda-artifacts/function.zip

      - name: Create Lambda Function if Not Exists
        run: |
          set -e
          FUNCTION_NAME="flask-backend-lambda"
          ROLE_ARN="${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }}"
          REGION="ap-south-1"

          if ! aws lambda get-function --function-name "$FUNCTION_NAME" > /dev/null 2>&1; then
            echo "üîß Function not found. Creating it..."
            aws lambda create-function \
              --function-name "$FUNCTION_NAME" \
              --runtime python3.11 \
              --role "$ROLE_ARN" \
              --handler app.lambda_handler \
              --code S3Bucket=k3-lambda-artifacts,S3Key=function.zip \
              --timeout 30 \
              --memory-size 256 \
              --layers arn:aws:lambda:$REGION:${{ secrets.AWS_ACCOUNT_ID }}:layer:flask-layer-k3:$LAYER_VERSION \
              --region $REGION
          else
            echo "‚úÖ Function exists. Skipping creation."
          fi

      - name: Install jq (for JSON parsing)
        run: sudo apt-get install -y jq

      - name: Wait for Lambda Function to be Fully Ready
        run: |
          FUNCTION_NAME="flask-backend-lambda"
          echo "‚è≥ Waiting for Lambda to be ready for update..."

          for i in {1..30}; do
            CONFIG=$(aws lambda get-function-configuration --function-name "$FUNCTION_NAME")
            STATE=$(echo "$CONFIG" | jq -r '.State')
            UPDATE_STATUS=$(echo "$CONFIG" | jq -r '.LastUpdateStatus')

            echo "[$i] State: $STATE | LastUpdateStatus: $UPDATE_STATUS"

            if [[ "$STATE" == "Active" && "$UPDATE_STATUS" == "Successful" ]]; then
              echo "‚úÖ Lambda is ready."
              break
            fi

            if [[ "$UPDATE_STATUS" == "Failed" ]]; then
              echo "‚ùå Lambda creation/update failed."
              exit 1
            fi

            sleep 10
          done

      - name: Update Lambda Function Code and Layer
        run: |
          aws lambda update-function-code \
            --function-name flask-backend-lambda \
            --s3-bucket k3-lambda-artifacts \
            --s3-key function.zip

          aws lambda update-function-configuration \
            --function-name flask-backend-lambda \
            --layers arn:aws:lambda:ap-south-1:${{ secrets.AWS_ACCOUNT_ID }}:layer:flask-layer-k3:$LAYER_VERSION

      - name: Optional Cleanup - Remove ZIPs from S3
        if: success()
        run: |
          aws s3 rm s3://k3-lambda-artifacts/function.zip || true
          aws s3 rm s3://k3-lambda-artifacts/layers/flask-layer-k3.zip || true
