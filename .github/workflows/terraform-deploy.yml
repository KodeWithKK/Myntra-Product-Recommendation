name: Backend Deployment

on:
  workflow_dispatch:
  # Uncomment below to auto-deploy on push to master
  # push:
  #   branches:
  #     - master

env:
  AWS_REGION: ap-south-1
  ECR_REPO: myntra-prs-backend

jobs:
  terraform_setup:
    name: Terraform - ECR & IAM Setup
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend/terraform

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply - Infra Setup (ECR, IAM)
        run: terraform apply -target=aws_ecr_repository.lambda_ecr_repo -target=aws_iam_role.lambda_exec_role -auto-approve

  docker_push:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: terraform_setup

    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker Image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          ECR_URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}"
          docker build -t $ECR_URI:latest .
          docker push $ECR_URI:latest

  terraform_lambda:
    name: Deploy Lambda with Image
    runs-on: ubuntu-latest
    needs: docker_push

    defaults:
      run:
        working-directory: backend/terraform

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.0

      - name: Terraform Init
        run: terraform init

      - name: Write env.tfvars
        run: printf "%s\n" "${{ secrets.BACKEND_ENV_TFVARS_FILE }}" > env.tfvars

      - name: Terraform Apply - Lambda Deployment
        run: terraform apply -var-file="env.tfvars" -auto-approve

      - name: Get Lambda URL from Terraform Output
        id: tf_output
        run: |
          cd terraform
          terraform output -raw lambda_url > lambda_url.txt
          echo "lambda_url=$(cat lambda_url.txt)" >> $GITHUB_OUTPUT

      - name: Deployment Summary
        run: |
          echo "### ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Lambda URL**: [${{ steps.tf_output.outputs.lambda_url }}](${{ steps.tf_output.outputs.lambda_url }})" >> $GITHUB_STEP_SUMMARY
